<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot_demo.mapper.EmpMapper">
    <!-- 添加员工信息 -->
    <insert id="add">
        <!-- 将员工信息插入到emp表中 -->
        insert into emp(username,password,name,gender,image,job,entrydate,dept_id,create_time,update_time)
        values(#{username},#{password},#{name},#{gender},#{image},#{job},#{entrydate},#{deptId},#{createTime},#{updateTime})
    </insert>
    <update id="update">
        update emp
        <set>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="gender != null">
                gender = #{gender},
            </if>
            <if test="image != null">
                image = #{image},
            </if>
            <if test="job != null">
                job = #{job},
            </if>
            <if test="entrydate != null">
                entrydate = #{entrydate},
            </if>
            <if test="deptId != null">
                dept_id = #{deptId},
            </if>
            <if test="updateTime != null">
                    update_time = #{updateTime}
            </if>
        </set>
        where id = #{id}
    </update>

    <!-- 删除员工信息 -->
    <delete id="delete">
        <!-- 删除emp表中指定id的员工信息 -->
        delete from emp where id in
        <!-- 遍历传入的ids集合，每个id作为删除条件 -->
        <foreach collection="ids" item="id" separator="," open = "(" close = ")">
            #{id}
        </foreach>
    </delete>
    <delete id="deleteByDeptId">
        delete from emp where dept_id = #{deptId}
    </delete>
    <!--
        查询员工列表的SQL语句
        该语句使用动态SQL元素来根据传入的参数条件进行查询
        结果类型指定为Emp类，表示查询结果将映射为Emp对象
    -->
    <select id="list" resultType="com.example.springboot_demo.pojo.Emp">
        select *
        from emp
        <where>
            <!--
                如果name参数不为空，则添加name的模糊匹配条件
                使用concat函数将%作为通配符添加到name的两侧，实现模糊查询
            -->
            <if test = "name != null">
                name like concat('%',#{name},'%')
            </if>
            <!--
                如果gender参数不为空，则添加gender的精确匹配条件
                使用and连接词添加到已有条件之后
            -->
            <if test = "gender != null">
                and gender = #{gender}
            </if>
            <!--
                如果begin和end参数都不为空，则添加entrydate的范围查询条件
                使用and连接词添加到已有条件之后
            -->
            <if test = "begin != null and end != null">
                and entrydate between #{begin} and #{end}
            </if>
        </where>
        <!-- 按照update_time字段降序排序 -->
        order by update_time desc
    </select>
    <!--
        查询员工信息

        通过员工ID查询员工表(emp)中的所有列
        使用#{id}占位符来传递员工ID，提高SQL的灵活性和安全性

        参数:
        - id: 员工的唯一标识符

        返回值:
        - com.example.springboot_demo.pojo.Emp: 对应员工ID的员工对象，如果找不到则返回null
    -->
    <select id="getById" resultType="com.example.springboot_demo.pojo.Emp">
        select *
        from emp
        where id = #{id}
    </select>
    <select id="getByUsernameAndPassword" resultType="com.example.springboot_demo.pojo.Emp">
        select *
        from emp
        where username = #{username} and password = #{password}
    </select>
</mapper>